name: web
services:

  backend:
    image: web-backend
    container_name: "backend"
    ports:
      - '8082:8081'
    depends_on:
      postgres-master:
        condition: service_healthy
    restart: on-failure
    environment:
      POSTGRESQL_HOST: 172.28.2.1
      POSTGRESQL_PORT: 5432
      POSTGRESQL_USERNAME: studios
      POSTGRESQL_PASSWORD: studios
      POSTGRESQL_DATABASE: studios
      BACKEND_TYPE: docker
      BACKEND_PORT: 8081
    networks:
      web:
        ipv4_address: 172.28.1.1

  backend-ro-1:
    image: web-backend
    container_name: "backend-ro-1"
    ports:
      - '8083:8081'
    depends_on:
      postgres-master:
        condition: service_healthy
    restart: on-failure
    environment:
      POSTGRESQL_HOST: 172.28.2.2
      POSTGRESQL_PORT: 5432
      POSTGRESQL_USERNAME: studios_ro
      POSTGRESQL_PASSWORD: studios
      POSTGRESQL_DATABASE: studios
      BACKEND_TYPE: docker
      BACKEND_PORT: 8081
    networks:
      web:
        ipv4_address: 172.28.1.2

  backend-ro-2:
    image: web-backend
    container_name: "backend-ro-2"
    ports:
      - '8084:8081'
    depends_on:
      postgres-master:
        condition: service_healthy
    restart: on-failure
    environment:
      POSTGRESQL_HOST: 172.28.2.2
      POSTGRESQL_PORT: 5432
      POSTGRESQL_USERNAME: studios_ro
      POSTGRESQL_PASSWORD: studios
      POSTGRESQL_DATABASE: studios
      BACKEND_TYPE: docker
      BACKEND_PORT: 8081
    networks:
      web:
        ipv4_address: 172.28.1.3

  backend-mirror:
    image: web-backend
    container_name: "backend-mirror"
    ports:
      - '8085:8081'
    depends_on:
      postgres-master:
        condition: service_healthy
    restart: on-failure
    environment:
      POSTGRESQL_HOST: 172.28.2.1
      POSTGRESQL_PORT: 5432
      POSTGRESQL_USERNAME: studios
      POSTGRESQL_PASSWORD: studios
      POSTGRESQL_DATABASE: studios
      BACKEND_TYPE: docker
      BACKEND_PORT: 8081
    networks:
      web:
        ipv4_address: 172.28.1.4

  postgres-master:
    container_name: "postgres-master"
    image: postgres:16
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U studios"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRESQL_REPLICATION_MODE: master
      POSTGRESQL_REPLICATION_USER: repl_user
      POSTGRESQL_REPLICATION_PASSWORD: admin
      POSTGRES_DB: studios
      POSTGRES_USER: studios
      POSTGRES_PASSWORD: studios
      POSTGRESQL_PORT: 5432
      TZ: "Europe/Moscow"
    ports:
      - "5438:5432"
    restart: on-failure
    networks:
      web:
        ipv4_address: 172.28.2.1
    volumes:
      - ./db/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
#      - ./db/conf/master:/var/lib/postgresql/data
#    command:
#      - /conf/postgresql.conf >> /var/lib/postgresql/data/postgresql.conf


  #rm -rf /var/lib/postgresql/data/* && su - postgres -c "pg_basebackup --host=172.28.2.1 --username=studios --pgdata=/var/lib/postgresql/data --wal-method=stream --write-recovery-conf --progress"
  postgres-slave:
    container_name: "postgres-slave"
    image: bitnami/postgresql:16
    privileged: true
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d studios -U studios"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRESQL_REPLICATION_MODE: slave
      POSTGRESQL_REPLICATION_USER: studios
      POSTGRESQL_REPLICATION_PASSWORD: admin
      POSTGRESQL_MASTER_HOST: 172.28.2.1
      POSTGRES_DB: studios
      POSTGRES_USER: studios_ro
      POSTGRES_PASSWORD: studios
      POSTGRESQL_PORT: 5432
      POSTGRESQL_MASTER_PORT_NUMBER: 5432
      TZ: "Europe/Moscow"
    restart: on-failure
    depends_on:
      postgres-master:
        condition: service_healthy
    ports:
      - "5439:5432"
    networks:
      web:
        ipv4_address: 172.28.2.2

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:6.19
    depends_on:
      postgres-master:
        condition: service_healthy
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@web.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - '5050:80'
    networks:
      web:
        ipv4_address: 172.28.3.1

  swagger:
    container_name: swagger
    image: swaggerapi/swagger-ui
    environment:
      SWAGGER_JSON: /mnt/openapi.yaml  # Points to the OpenAPI YAML file
    volumes:
      - ./docs/swagger/swagger.yaml:/mnt/openapi.yaml  # Adjust the path to your OpenAPI file
    ports:
      - "3000:8080"  # Maps port 3000 on the host to 8080 in the container
    networks:
      web:
        ipv4_address: 172.28.4.1

  load-testing-locust:
    image: locustio/locust
    container_name: load-testing-locust
    ports:
      - "9001:8089"
    volumes:
      - "./load-testing/locust:/mnt/load-testing"
    depends_on:
      nginx:
        condition: service_started
    entrypoint: ["-f /mnt/load-testing/locustfile.py", "-u 10000", "-r 100", "-H http://172.28.22.1"]
    networks:
      web:
        ipv4_address: 172.28.5.1

  load-testing-gatling:
    image: denvazh/gatling:latest
    container_name: load-testing-gatling
    volumes:
      - ./load-testing/gatling/simulations:/opt/gatling/user-files/simulations
      - ./load-testing/gatling/results:/opt/gatling/results
    depends_on:
      nginx:
        condition: service_started
    entrypoint: ["/bin/sh", "-c", "gatling.sh -s ServerPerSecondLoadSimulation"]
    networks:
      web:
        ipv4_address: 172.28.5.2

  nginx:
    container_name: nginx
    image: nginx:1.27
    ports:
      - "80:80"
    volumes:
      - ./nginx/readme:/usr/share/nginx/readme
      - ./nginx/conf:/etc/nginx
      - ./nginx/html:/usr/share/nginx/html
      - ./nginx/logs:/etc/nginx/logs
    restart: always
    depends_on:
      pgadmin:
        condition: service_started
#      backend-1:
#        condition: service_started
#      backend-2:
#        condition: service_started
      postgres-master:
        condition: service_healthy
      postgres-slave:
        condition: service_healthy
      swagger:
        condition: service_started
    networks:
      web:
        ipv4_address: 172.28.22.1

networks:
  web:
    name: web
    driver: bridge  # Используем драйвер bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16  # Задаем подсеть