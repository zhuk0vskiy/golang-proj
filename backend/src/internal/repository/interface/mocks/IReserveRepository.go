// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	dto "backend/src/internal/model/dto"
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "backend/src/internal/model"
)

// IReserveRepository is an autogenerated mock type for the IReserveRepository type
type IReserveRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, request
func (_m *IReserveRepository) Add(ctx context.Context, request *dto.AddReserveRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.AddReserveRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, request
func (_m *IReserveRepository) Delete(ctx context.Context, request *dto.DeleteReserveRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.DeleteReserveRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx, request
func (_m *IReserveRepository) GetAll(ctx context.Context, request *dto.GetAllReserveRequest) ([]*model.Reserve, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*model.Reserve
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetAllReserveRequest) ([]*model.Reserve, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetAllReserveRequest) []*model.Reserve); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Reserve)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.GetAllReserveRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByInstrumentalistId provides a mock function with given fields: ctx, request
func (_m *IReserveRepository) GetByInstrumentalistId(ctx context.Context, request *dto.GetReserveByInstrumentalistIdRequest) ([]*model.Reserve, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetByInstrumentalistId")
	}

	var r0 []*model.Reserve
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetReserveByInstrumentalistIdRequest) ([]*model.Reserve, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetReserveByInstrumentalistIdRequest) []*model.Reserve); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Reserve)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.GetReserveByInstrumentalistIdRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByProducerId provides a mock function with given fields: ctx, request
func (_m *IReserveRepository) GetByProducerId(ctx context.Context, request *dto.GetReserveByProducerIdRequest) ([]*model.Reserve, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetByProducerId")
	}

	var r0 []*model.Reserve
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetReserveByProducerIdRequest) ([]*model.Reserve, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetReserveByProducerIdRequest) []*model.Reserve); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Reserve)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.GetReserveByProducerIdRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByRoomId provides a mock function with given fields: ctx, request
func (_m *IReserveRepository) GetByRoomId(ctx context.Context, request *dto.GetReserveByRoomIdRequest) ([]*model.Reserve, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetByRoomId")
	}

	var r0 []*model.Reserve
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetReserveByRoomIdRequest) ([]*model.Reserve, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetReserveByRoomIdRequest) []*model.Reserve); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Reserve)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.GetReserveByRoomIdRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserReserves provides a mock function with given fields: ctx, request
func (_m *IReserveRepository) GetUserReserves(ctx context.Context, request *dto.GetUserReservesRequest) ([]*model.Reserve, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetUserReserves")
	}

	var r0 []*model.Reserve
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetUserReservesRequest) ([]*model.Reserve, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetUserReservesRequest) []*model.Reserve); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Reserve)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.GetUserReservesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsEquipmentReserve provides a mock function with given fields: ctx, request
func (_m *IReserveRepository) IsEquipmentReserve(ctx context.Context, request *dto.IsEquipmentReserveRequest) (bool, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for IsEquipmentReserve")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.IsEquipmentReserveRequest) (bool, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.IsEquipmentReserveRequest) bool); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.IsEquipmentReserveRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsInstrumentalistReserve provides a mock function with given fields: ctx, request
func (_m *IReserveRepository) IsInstrumentalistReserve(ctx context.Context, request *dto.IsInstrumentalistReserveRequest) (bool, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for IsInstrumentalistReserve")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.IsInstrumentalistReserveRequest) (bool, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.IsInstrumentalistReserveRequest) bool); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.IsInstrumentalistReserveRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsProducerReserve provides a mock function with given fields: ctx, request
func (_m *IReserveRepository) IsProducerReserve(ctx context.Context, request *dto.IsProducerReserveRequest) (bool, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for IsProducerReserve")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.IsProducerReserveRequest) (bool, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.IsProducerReserveRequest) bool); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.IsProducerReserveRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsRoomReserve provides a mock function with given fields: ctx, request
func (_m *IReserveRepository) IsRoomReserve(ctx context.Context, request *dto.IsRoomReserveRequest) (bool, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for IsRoomReserve")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.IsRoomReserveRequest) (bool, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.IsRoomReserveRequest) bool); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.IsRoomReserveRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIReserveRepository creates a new instance of IReserveRepository. It also registers a testing interface on the mock and a cleanup function to assert the pool expectations.
// The first argument is typically a *testing.T value.
func NewIReserveRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IReserveRepository {
	mock := &IReserveRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
