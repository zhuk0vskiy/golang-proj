// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	dto "backend/src/internal/model/dto"
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "backend/src/internal/model"
)

// IRoomRepository is an autogenerated mock type for the IRoomRepository type
type IRoomRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, request
func (_m *IRoomRepository) Add(ctx context.Context, request *dto.AddRoomRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.AddRoomRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, request
func (_m *IRoomRepository) Delete(ctx context.Context, request *dto.DeleteRoomRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.DeleteRoomRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, request
func (_m *IRoomRepository) Get(ctx context.Context, request *dto.GetRoomRequest) (*model.Room, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.Room
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetRoomRequest) (*model.Room, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetRoomRequest) *model.Room); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Room)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.GetRoomRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByStudio provides a mock function with given fields: ctx, request
func (_m *IRoomRepository) GetByStudio(ctx context.Context, request *dto.GetRoomByStudioRequest) ([]*model.Room, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetByStudio")
	}

	var r0 []*model.Room
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetRoomByStudioRequest) ([]*model.Room, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetRoomByStudioRequest) []*model.Room); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Room)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.GetRoomByStudioRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, request
func (_m *IRoomRepository) Update(ctx context.Context, request *dto.UpdateRoomRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UpdateRoomRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIRoomRepository creates a new instance of IRoomRepository. It also registers a testing interface on the mock and a cleanup function to assert the pool expectations.
// The first argument is typically a *testing.T value.
func NewIRoomRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRoomRepository {
	mock := &IRoomRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
